global proc shelf_SnapshotCreator () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "User Script" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "User Script" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Snapshot Creator" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "alignSurface.svg" 
        -image1 "alignSurface.svg" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from datetime import date, datetime\nfrom fileinput import filename\nfrom maya import cmds, OpenMaya as mayaLib, OpenMayaUI as mayaUi\nimport pymel.core.uitypes as pymui\nfrom pymel import core as pym\n\nimport os as system\n\nmainWindow = pym.ui.Window(pym.MelGlobals.get('gMainWindow'))\n\neditableUiObjects = {}\ncameraConfig = {}\nconfigOptions = {}\nratioOptions = {}\ndisplayOptions = {}\npanelsByCamera = {}\n\ncameras = []\npanels = []\n\nwindowName = \"SnapshotCreator\"\nwindowNameConfig = \"ConfigWindow\"\nwindowTitleConfig = \"Configure your presets\"\nwindowTitle = \"Snapshot Creator by Angel Bea\"\nplaceHolderProjectPath = \"Add a folder to save the snapshots\"\nprojectPath = placeHolderProjectPath\ninitTextLogConsole = \"Initializing... Welcome to Snapshot Creator 0.1\"\n\nmainWidth = pym.window(mainWindow, query=True, width=True)\nmainHeight = pym.window(mainWindow, query=True, height=True)\n\nresponsiveSize = 0.50\nconfigResponsiveSize = 0.50\nheightResponsive = mainHeight * responsiveSize\nwidthResponsive = mainWidth * responsiveSize\n\nconfigHeightResponsive = mainHeight * configResponsiveSize\nconfigWidthResponsive = mainWidth * configResponsiveSize\n\ndef start_ui():\n    get_cameras_with_panels()\n    delete_window(windowNameConfig)\n    delete_window(windowName)\n    windowLayout = new_window()\n    load_options()\n    load_config()\n    create_elements(windowLayout)\n    check_folder_selected()\n    config_camera()\n\n    pym.showWindow()\n\n\ndef new_window():\n    pym.window(\n        windowName, \n        maximizeButton=False, \n        title=windowTitle, \n        sizeable=False, \n        width=widthResponsive, \n        height=heightResponsive\n        )\n    return pym.formLayout()\n\ndef delete_window(window):\n    if pym.window(window, exists=True):\n        pym.deleteUI(window)\n\ndef create_elements(layout):\n    #Responsive variables\n    widthTextField = widthResponsive * 0.50\n    widthButton = widthResponsive * 0.05\n    widthLogConsole = widthResponsive * 0.30\n    heightLogConsole = heightResponsive * 0.10 \n    widthActionsLabel = widthResponsive * 0.10\n    heightActionsLabel = heightResponsive * 0.05\n    heightActionButtons = heightResponsive * 0.05\n    widthActionsButtons = widthResponsive * 0.15\n    widthOpenConfigButton = widthResponsive * 0.05\n    widthOptionsCamera = widthResponsive * 0.15\n\n    topOffsetFirstRow = 10\n    cameraSelectionTopOffset = topOffsetFirstRow + 60\n    labelCameraSelectionTopOffset = topOffsetFirstRow + 40\n\n    topOffsetSecondRow = heightLogConsole + topOffsetFirstRow + 30\n    topOffsetSecondRowFirstButton = topOffsetSecondRow + heightActionsLabel\n\n    leftOffsetTextField = 20\n    leftOffsetButton = widthTextField + leftOffsetTextField + 10\n    leftOffsetConsoleLog = leftOffsetButton + widthButton + 100\n    leftActionsOffset = leftOffsetConsoleLog + 100\n    leftOffsetConfigbutton = leftOffsetTextField + widthOptionsCamera + 10\n\n    #First Row\n    pathTextField = pym.textField(\"PathField\", editable=False, text=projectPath, width=widthTextField)\n    layout.attachForm(pathTextField, \"top\", topOffsetFirstRow)\n    layout.attachForm(pathTextField, \"left\", leftOffsetTextField)\n    editableUiObjects[\"pathTextField\"] = pathTextField\n\n    logConsole = pym.textScrollList(\"LogConsole\", enable=False, width=widthLogConsole, height=heightLogConsole, selectCommand=\"deselect_on_select_log()\")\n    logConsole.append(initTextLogConsole)\n    layout.attachForm(logConsole, \"top\", topOffsetFirstRow)\n    layout.attachForm(logConsole, \"left\", leftOffsetConsoleLog)\n    editableUiObjects[\"logConsole\"] = logConsole\n\n\n    buttonFolder = pym.button(l=u\"\\U0001F5C1\", width=widthButton, command='select_folder()')\n    layout.attachForm(buttonFolder, \"top\", topOffsetFirstRow)\n    layout.attachForm(buttonFolder, \"left\", leftOffsetButton)\n\n    #Camera and Config\n    labelSelectCamera = pym.text(\"Select Camera\")\n    layout.attachForm(labelSelectCamera, \"top\", labelCameraSelectionTopOffset)\n    layout.attachForm(labelSelectCamera, \"left\", leftOffsetTextField)\n\n    optionMenu = pym.optionMenu(changeCommand=\"config_camera()\", maxVisibleItems=6, width=widthOptionsCamera)\n    editableUiObjects[\"camera\"] = optionMenu\n\n    for cam in cameras:\n        pym.menuItem(label=f'{cam}')\n\n    layout.attachForm(optionMenu, \"top\", cameraSelectionTopOffset)\n    layout.attachForm(optionMenu, \"left\", leftOffsetTextField)\n\n    editor = pym.modelEditor(camera=cameraConfig[\"camera\"], activeView=True, width=600, height=600, displayTextures=True, displayAppearance=\"smoothShaded\")\n    editableUiObjects[\"editor\"] = editor\n    pym.formLayout(layout, edit=True, attachForm=[(editor, 'top', 500), (editor, 'left', 500)])\n\n    buttonConfig = pym.button(l=u\"\\u2699\", width=widthOpenConfigButton, command=\"load_config_window()\")\n    layout.attachForm(buttonConfig, \"top\", cameraSelectionTopOffset)\n    layout.attachForm(buttonConfig, \"left\", leftOffsetConfigbutton)\n\n    #Second Row\n    actionsLabel = pym.text(l='Actions', width=widthActionsLabel, font='boldLabelFont', recomputeSize=True, height=heightActionsLabel)\n    layout.attachForm(actionsLabel, \"top\", topOffsetSecondRow)\n    layout.attachForm(actionsLabel, \"left\", leftActionsOffset)\n\n    buttonSaveSnapshot = pym.button(l=u\"\\U0001F4F7 Save Snapshot\", width=widthActionsButtons, height=heightActionButtons, backgroundColor=(0, 0.355, 0.25), command='save_snapshot()')\n    layout.attachForm(buttonSaveSnapshot, \"top\", topOffsetSecondRowFirstButton)\n    layout.attachForm(buttonSaveSnapshot, \"left\", leftActionsOffset - 25)\n\ndef select_folder():\n    folderSelected = pym.fileDialog2(cap='Select the snapshot folder', okCaption='Select', fileMode=3, dialogStyle=2)\n    global projectPath \n    projectPath = folderSelected[0]\n    add_log(f\"Folder added: {folderSelected[0]}\")\n    editableUiObjects[\"pathTextField\"].setText(folderSelected[0])\n\ndef add_log(text):\n    if editableUiObjects:\n        logConsole = editableUiObjects[\"logConsole\"]\n        logConsole.append(text)\n        logConsole.showIndexedItem(logConsole.getNumberOfItems())\n    \ndef deselect_on_select_log():\n    logConsole = editableUiObjects[\"logConsole\"]\n    logConsole.deselectAll()\n\ndef save_snapshot():\n    if check_folder_selected():\n        #pym.lookThru(cameraConfig['camera'])\n\n        if '16:9' in cameraConfig['resolution']:\n            pym.viewFit(cameraConfig['camera'], f=0.5)\n        else:\n            pym.viewFit(cameraConfig['camera'])\n        fileName = f\"{projectPath}/{cameraConfig['camera']}_screenshot_{datetime.today().strftime('%Y-%m-%d_%H.%M.%S')}\"\n        pym.playblast(\n            editorPanelName=editableUiObjects[\"editor\"],\n            format='image', \n            filename= fileName,\n                        startTime=0,\n                        endTime=0,\n                        sequenceTime =0,\n                        clearCache=0,\n                        viewer=0,\n                        showOrnaments=0,\n                        framePadding=0, percent=100,\n                        compression=f\"{cameraConfig['file type']}\",\n                        quality=100,\n                        widthHeight=ratioOptions[cameraConfig[\"resolution\"]]\n        )\n\ndef load_config():\n    if not cameraConfig:\n        cameraConfig[\"camera\"] = f\"{cameras[0]}\"\n        cameraConfig[\"lights\"] = configOptions[\"lights\"][3];\n        cameraConfig[\"display\"] = configOptions[\"display\"][1];\n        cameraConfig[\"transparent\"] = True;\n        cameraConfig[\"resolution\"] = configOptions[\"resolution\"][2];\n        cameraConfig[\"file type\"] = configOptions[\"file type\"][0];\n        cameraConfig[\"fit camera\"] = True\n        add_log(\"Config loaded\")\n\ndef load_options():\n    global configOptions\n    configOptions[\"display\"] = [\"flatShaded\", \"smoothShaded\"]\n    configOptions[\"lights\"] = [\"all\", \"default\", \"active\", \"flat\"]\n    configOptions[\"resolution\"] = ['[1:1] - 512', '[16:9] - 480p - ED',\n            '[1:1] - 1K', '[16:9] - 720p - HD' , '[16:9] - 1080p - FHD',\n            '[1:1] - 2K', '[16:9] - 1440p - QHD', \n            '[1:1] - 4K', '[16:9] - 2160p - UHD']\n    configOptions[\"file type\"] = [\"png\", \"jpg\"]\n    \n    ratioOptions['[1:1] - 512'] = (512, 512)\n    ratioOptions['[1:1] - 1K'] = (1024, 1024)\n    ratioOptions['[1:1] - 2K'] = (2048, 2048)\n    ratioOptions['[1:1] - 4K]'] = (4096, 4096)\n\n    ratioOptions['[16:9] - 480p - ED'] = (854, 480)\n    ratioOptions['[16:9] - 720p - HD'] = (1280, 720)\n    ratioOptions['[16:9] - 1080p - FHD'] = (1920, 1080)\n    ratioOptions['[16:9] - 1440p - QHD'] = (2560, 1440)\n    ratioOptions['[16:9] - 2160p - UHD'] = (3840, 2160)\n\ndef load_config_window():\n    delete_window(windowNameConfig)\n    widthHeightWindow = 512\n    widthOptionsCamera = widthResponsive * 0.30\n    configOffsetTop = 25\n    configOffsetLeft = 25\n    numberOfConfigs = 1\n\n    pym.window(windowNameConfig, title=windowTitleConfig, sizeable=False, width=widthHeightWindow, height=widthHeightWindow)\n    layout = pym.formLayout()\n    for configKey in configOptions.keys():\n        option = pym.optionMenu(label=configKey.capitalize(), changeCommand=f\"config_changed('{configKey}')\", maxVisibleItems=6, width=widthOptionsCamera)\n\n        layout.attachForm(option, \"top\", configOffsetTop * numberOfConfigs)\n        layout.attachForm(option, \"left\", configOffsetLeft)\n        editableUiObjects[configKey] = option\n\n        numberOfConfigs += 1\n        for value in configOptions[configKey]:\n            pym.menuItem(label=value)\n\n        option.setSelect(configOptions[configKey].index(cameraConfig[configKey]) + 1)\n\n    \n    pym.showWindow()\n\ndef config_changed(config):\n    item = editableUiObjects[config].getValue()\n    cameraConfig[config] = item    \n    return item\n\ndef config_camera():\n    camera = config_changed('camera')\n    print(editableUiObjects[\"editor\"])\n    \n    pym.modelEditor(editableUiObjects[\"editor\"], edit=True, camera=camera, activeView=True)\n    #pym.lookThru(camera)\n    print(editableUiObjects[\"editor\"].getCamera())\n    print(editableUiObjects[\"editor\"].getActiveView())\n    \n    \n\ndef check_folder_selected():\n    if projectPath == placeHolderProjectPath:\n        add_log('[WARNING] Add a folder to save your snapshots')\n        return False\n    else:\n        return True\n\ndef get_cameras_with_panels():\n    global cameras, panels\n    panels = pym.getPanel(type='modelPanel')\n    cameras = []\n\n    for panel in panels:\n        print(panel)\n        try:\n            modelPanelCamera = pym.modelPanel(panel, query=True, camera=True)\n            print(modelPanelCamera)\n            cameras.append(modelPanelCamera)\n            panelsByCamera[modelPanelCamera] = panel\n        except:\n            print('No camera in this panel')\n            continue\n\nstart_ui()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
